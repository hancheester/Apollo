<?xml version="1.0" encoding="utf-8" ?>
<!-- An EXAMPLE Application Configuration that demonstrates how to use and configure Dache -->
<configuration>
  <!-- Dache Client Config Section -->
  <configSections>
    <section name="cacheClientSettings" type="Apollo.Dache.Client.Configuration.CacheClientConfigurationSection, Apollo.Dache.Client"/>
  </configSections>

  <!-- Cache Client Settings
         hostReconnectIntervalSeconds: the interval in seconds at which to try reconnected to a disconnected cache host
         hostRedundancyLayers: the number of servers that should duplicate data. EXAMPLES: If you have 10 servers and set this to 0, you'll 
                               have 10 cache host buckets with 1 server each (no redundancy). If you have 10 servers and set this to 1, 
                               you'll have 5 cache host buckets with 2 servers each (doubly redundant and doubly available). Use this to 
                               guard against Dache host server shutdowns or crashes -->
  <cacheClientSettings hostReconnectIntervalSeconds="10" hostRedundancyLayers="0">
    <!-- Custom logging is optional, but this is how you'd implement it. Your custom type must implement Dache.Client.Logging.ILogger -->
    <customLogger type="My.Custom.Logger, My.Custom" />
    <!-- Custom serialization is optional, but this is how you'd implement it. Your custom type must implement Dache.Client.Serialization.IBinarySerializer -->
    <customSerializer type="My.Custom.Serializer, My.Custom" />
    <cacheHosts>
      <add address="cacheHost1.your.domain" port="33332" />
      <add address="cacheHost2.your.domain" port="33333" />
      <add address="localhost" port="33334" />
      <add address="192.168.1.123" port="33335" />
    </cacheHosts>
  </cacheClientSettings>

  <system.web>
    <!-- Dache-based Session State Provider -->
    <sessionState cookieless="false" regenerateExpiredSessionId="true" mode="Custom" customProvider="DacheSessionProvider">
      <providers>
        <add name="DacheSessionProvider"
             type="Apollo.Dache.Client.Plugins.SessionState.DacheSessionStateProvider, Apollo.Dache.Client"
             writeExceptionsToEventLog="false" />
      </providers>
    </sessionState>

    <!-- Dache-based Output Caching Provider -->
    <caching>
      <outputCache defaultProvider="DacheOutputCacheProvider">
        <providers>
          <clear/>
          <add name="DacheOutputCacheProvider"
               type="Apollo.Dache.Client.Plugins.OutputCache.DacheOutputCacheProvider, Apollo.Dache.Client"/>
        </providers>
      </outputCache>
    </caching>
  </system.web>
</configuration>

<!--
EXAMPLE registration of Dache for MVC Child Action Cache in Global.asax.cs
protected void Application_Start()
{
    // Register Dache for MVC Child Action Caching
    var cacheClient = new CacheClient();
    OutputCacheAttribute.ChildActionCache = new DacheMvcChildActionCache(cacheClient);
}
-->