@using Apollo.FrontStore.Models.Brand;
@model IList<BrandModel>

@if (Model.Count > 0)
{
    <ul class="col-sm-3">
        @for (int i = 0; i < Model.Count; i++)
        {
            if (i % 4 == 0)
            {
                var microsite = Model[i].HasMicrosite ? "<span class='glyphicon glyphicon-comment'></span>" : string.Empty;
                <li><a href="@Url.RouteUrl("Brand", new { urlKey = Model[i].UrlKey }, this.Request.Url.Scheme)">@Html.Raw(Model[i].Name) @Html.Raw(microsite)</a></li>
            }
        }        
    </ul>
    <ul class="col-sm-3">
        @for (int i = 0; i < Model.Count; i++)
        {
            if (i % 4 == 1)
            {
                var microsite = Model[i].HasMicrosite ? "<span class='glyphicon glyphicon-comment'></span>" : string.Empty;
                <li><a href="@Url.RouteUrl("Brand", new { urlKey = Model[i].UrlKey }, this.Request.Url.Scheme)">@Html.Raw(Model[i].Name) @Html.Raw(microsite)</a></li>
            }
        }        
    </ul>
    <ul class="col-sm-3">
        @for (int i = 0; i < Model.Count; i++)
        {
            if (i % 4 == 2)
            {
                var microsite = Model[i].HasMicrosite ? "<span class='glyphicon glyphicon-comment'></span>" : string.Empty;
                <li><a href="@Url.RouteUrl("Brand", new { urlKey = Model[i].UrlKey }, this.Request.Url.Scheme)">@Html.Raw(Model[i].Name) @Html.Raw(microsite)</a></li>
            }
        }
    </ul>
    <ul class="col-sm-3">
        @for (int i = 0; i < Model.Count; i++)
        {
            if (i % 4 == 3)
            {
                var microsite = Model[i].HasMicrosite ? "<span class='glyphicon glyphicon-comment'></span>" : string.Empty;
                <li><a href="@Url.RouteUrl("Brand", new { urlKey = Model[i].UrlKey }, this.Request.Url.Scheme)">@Html.Raw(Model[i].Name) @Html.Raw(microsite)</a></li>
            }
        }
    </ul>
}