@using Apollo.FrontStore.Models.Product;
@using Apollo.Core.Model;
@model IList<ProductPriceModel>

@if (Model.Count > 0)
{
    string controlId = string.Format("product_price_{0}", ViewBag.ProductId);

    <div>
        @if (Model.Count > 0)
        {
            <amp-state id="product">
                <script type="application/json">
                    {
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            if (Model[i].IsPreSelected)
                            {
                                @:"selectedId" : "@Model[i].Id",
                                @:"selectedCurrencySymbol" : "@Html.Raw(Model[i].CurrencySymbol)",
                                @:"selectedCurrencyCode" : "@Model[i].CurrencyCode",
                            }

                            @:"@Model[i].Id" : { "price" : "@Html.Raw(@Model[i].OfferPriceValue)", "availability" : "@(@Model[i].StockAvailability ? "yes" : "no")" }

                            if (i < (Model.Count - 1))
                            {
                                @:,
                            }                            
                        }
                    }
                </script>
            </amp-state>
        }

        @switch ((OptionType)ViewBag.OptionType)
        {
            case OptionType.Colour:
                if (Model.Count == 1)
                {
                    if (!string.IsNullOrWhiteSpace(Model[0].Option))
                    {
                        <h5>Colour: <span id="selectedColour">@Html.Raw(Model[0].Option)</span></h5>
                    }

                    <input type="hidden" name="@controlId" value="@Model[0].Id" />

                    <span class="color-container" title="@Model[0].Option">
                        <amp-img src="@Url.GenerateAbsoluteUrl(Model[0].PictureModel.ImageUrl)" width="50" height="50" class="@(Model[0].StockAvailability ? null : "unavailable")"></amp-img>
                    </span>
                }
                else
                {
                    <h5>Select colour: <span [text]="product[product.selectedId].name" id="selectedColour">@Html.Raw(Model[0].Option)</span></h5>
                    <amp-selector name="@controlId" layout="container" on="select: AMP.setState({ product: { selectedId: event.targetOption } })">
                        @foreach (var item in Model)
                        {
                            <amp-img src="@Url.GenerateAbsoluteUrl(item.PictureModel.ImageUrl)" width="50" height="50" class="@(item.StockAvailability ? null : "unavailable")" @(item.IsPreSelected ? "selected" : null) option="@item.Id"></amp-img>
                        }
                    </amp-selector>
                }
                break;
            case OptionType.Size:
                if (Model.Count == 1)
                {
                    if (!string.IsNullOrWhiteSpace(Model[0].Option))
                    {
                        <h5>Size:</h5> @Html.Raw(Model[0].Option)
                    }

                    <input type="hidden" name="@controlId" value="@Model[0].Id" />
                }
                else
                {
                    <h5>Select size:</h5>
                    <amp-selector name="@controlId" layout="container" on="select: AMP.setState({ product: { selectedId: event.targetOption } })">
                        <ul>
                            @foreach (var item in Model)
                            {
                                <li class="@(item.StockAvailability ? null : "unavailable")" @(item.IsPreSelected ? "selected" : null) option="@item.Id">@Html.Raw(item.Option)</li>
                            }
                        </ul>
                    </amp-selector>
                }
                break;
            case OptionType.GiftCard:
            default:
                @:<input type="hidden" name="@controlId" value="@Model[0].Id" />
                break;
        }
    </div>
}